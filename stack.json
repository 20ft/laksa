{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "20ft container network",
  "Parameters" : {
    "SSHKey" : {
      "Description" : "To enable access to the root instance (broker).",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "AZ" : {
      "Description" : "Availability zone to launch into.",
      "Type" : "AWS::EC2::AvailabilityZone::Name"
    }
  },
  "Resources" : {
    "BrokerRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Policies" : [
          {
            "PolicyName" : "Policy",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ec2:AllocateAddress",
                    "ec2:AllocateHosts",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:AssociateAddress",
                    "ec2:AssociateIamInstanceProfile",
                    "ec2:AttachInternetGateway",
                    "ec2:AttachNetworkInterface",
                    "ec2:AttachVolume",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:Describe*",
                    "ec2:DetachNetworkInterface",
                    "ec2:DisassociateAddress",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:RebootInstances",
                    "ec2:ReleaseAddress",
                    "ec2:ReleaseHosts",
                    "ec2:ReportInstanceStatus",
                    "ec2:RunInstances",
                    "ec2:StartInstances",
                    "ec2:StopInstances",
                    "ec2:TerminateInstances",
                    "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                    "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:ReplaceIamInstanceProfile"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "elasticfilesystem:*"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "logs:CreateLog*",
                    "logs:PutLog*",
                    "logs:Describe*"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ssm:DeleteParameter",
                    "ssm:DescribeParameters",
                    "ssm:GetParameter*",
                    "ssm:PutParameter"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "cloudwatch:GetMetric*",
                    "cloudwatch:ListMetrics",
                    "cloudwatch:PutMetricData",
                    "cloudwatch:PutDashboard"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ec2messages:*",
                    "ssm:UpdateInstanceInformation",
                    "ssm:ListInstanceAssociations",
                    "ssm:Describe*"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : "iam:PassRole",
                  "Resource" : "*"
                }
              ],
              "Version" : "2012-10-17"
            }
          }
        ],
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "BrokerInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [
          {
            "Ref" : "BrokerRole"
          }
        ]
      }
    },
    "NodeRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Policies" : [
          {
            "PolicyName" : "Policy",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "logs:CreateLog*",
                    "logs:PutLog*",
                    "logs:Describe*"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "ssm:DeleteParameter",
                    "ssm:DescribeParameters",
                    "ssm:GetParameter*",
                    "ssm:PutParameter"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "cloudwatch:GetMetric*",
                    "cloudwatch:ListMetrics",
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource" : [
                    "*"
                  ]
                }
              ],
              "Version" : "2012-10-17"
            }
          }
        ],
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "NodeInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [
          {
            "Ref" : "NodeRole"
          }
        ]
      }
    },
    "NodeInstanceParam" : {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "/20ft/node_instance_profile",
        "Description" : "The IAM profile used when creating a node",
        "Type" : "String",
        "Value" : {
          "Ref" : "NodeInstanceProfile"
        }
      }
    },
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "20ft"
          }
        ],
        "CidrBlock" : "172.31.0.0/20"
      }
    },
    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : "172.31.0.0/20",
        "VpcId" : {
          "Ref" : "VPC"
        },
        "MapPublicIpOnLaunch" : true,
        "AvailabilityZone" : {
          "Ref" : "AZ"
        }
      }
    },
    "Gateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },
    "GatewayAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "InternetGatewayId" : {
          "Ref" : "Gateway"
        },
        "VpcId" : {
          "Ref" : "VPC"
        }
      }
    },
    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {
          "Ref" : "VPC"
        }
      }
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : {
          "Ref" : "Gateway"
        },
        "RouteTableId" : {
          "Ref" : "RouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "Subnet"
        }
      }
    },
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "GroupName" : "20ft",
      "Properties" : {
        "GroupDescription" : "Security group for 20ft broker",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0",
            "Description" : "HTTP"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0",
            "Description" : "HTTPS"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0",
            "Description" : "SSH"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "2020",
            "ToPort" : "2020",
            "CidrIp" : "0.0.0.0/0",
            "Description" : "20ft client"
          },
          {
            "IpProtocol" : "icmp",
            "FromPort" : "-1",
            "ToPort" : "-1",
            "SourceSecurityGroupName" : {
              "Ref" : "SecurityGroup"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "2021",
            "ToPort" : "2021",
            "Description" : "20ft node",
            "SourceSecurityGroupName" : {
              "Ref" : "SecurityGroup"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "2049",
            "ToPort" : "2049",
            "Description" : "Elastic NFS",
            "SourceSecurityGroupName" : {
              "Ref" : "SecurityGroup"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "1025",
            "ToPort" : "1025",
            "Description" : "Layer Server",
            "SourceSecurityGroupName" : {
              "Ref" : "SecurityGroup"
            }
          },
          {
            "IpProtocol" : "47",
            "Description" : "Intra Node Comms",
            "SourceSecurityGroupName" : {
              "Ref" : "SecurityGroup"
            }
          }
        ],
        "VpcId" : {
          "Ref" : "VPC"
        }
      }
    },
    "StateFS" : {
      "Type" : "AWS::EFS::FileSystem"
    },
    "StateFSMountTarget" : {
      "Type" : "AWS::EFS::MountTarget",
      "Properties" : {
        "FileSystemId" : {
          "Ref" : "StateFS"
        },
        "SubnetId" : {
          "Ref" : "Subnet"
        },
        "SecurityGroups" : [
          {
            "Fn::GetAtt" : [
              "SecurityGroup",
              "GroupId"
            ]
          }
        ]
      }
    },
    "StateFSParam" : {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "/20ft/state_fs",
        "Description" : "The EFS filesystem holding the broker's state",
        "Type" : "String",
        "Value" : {
          "Ref" : "StateFS"
        }
      }
    },
    "Broker" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : "ami-f7c80a95",
        "InstanceType" : "t2.micro",
        "CreditSpecification" : {
          "CpuCredits" : "unlimited"
        },
        "DisableApiTermination" : "True",
        "KeyName" : {
          "Ref" : "SSHKey"
        },
        "SecurityGroupIds" : [
          {
            "Ref" : "SecurityGroup"
          }
        ],
        "SubnetId" : {
          "Ref" : "Subnet"
        },
        "IamInstanceProfile" : {
          "Ref" : "BrokerInstanceProfile"
        },
        "AvailabilityZone" : {
          "Ref" : "AZ"
        },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/xvdb",
            "Ebs" : {
              "VolumeSize" : "256",
              "VolumeType" : "gp2"
            }
          }
        ]
      }
    },
    "ElasticIP" : {
      "Type" : "AWS::EC2::EIP"
    },
    "IPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : {
          "Fn::GetAtt" : [
            "ElasticIP",
            "AllocationId"
          ]
        },
        "InstanceId" : {
          "Ref" : "Broker"
        }
      }
    }
  }
}
